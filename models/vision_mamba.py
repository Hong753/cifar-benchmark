# References: https://github.com/badripatro/simba/blob/main/classification/simba.py

from functools import partial
import math
import warnings
import torch
import torch.nn as nn
import torch.nn.functional as F

from einops import rearrange, repeat, einsum

from .p_scan import pscan

#----------------------------------------------------------------------------

@torch.no_grad()
def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor

#----------------------------------------------------------------------------

class PatchEmbed(nn.Module):
    def __init__(self, img_size, patch_size, in_channels, embed_dim, bias=True):
        super().__init__()
        assert isinstance(img_size, tuple) and len(img_size) == 2
        assert isinstance(patch_size, tuple) and len(patch_size) == 2
        assert img_size[0] % patch_size[0] == 0 and img_size[1] % patch_size[1] == 0
        self.img_size = img_size
        self.patch_size = patch_size
        self.grid_size = tuple([s // p for s, p in zip(self.img_size, self.patch_size)])
        self.num_patches = self.grid_size[0] * self.grid_size[1]
        self.proj = nn.Conv2d(in_channels, embed_dim, kernel_size=patch_size, stride=patch_size, padding=0, bias=bias)

    def forward(self, x):
        # B x 3 x H x W -> B x (H' x W') x C
        B, C, H, W = x.shape
        assert H == self.img_size[0]
        assert W == self.img_size[1]
        x = self.proj(x)
        x = torch.flatten(x, start_dim=2).transpose(1, 2)
        return x

#----------------------------------------------------------------------------

class Block(nn.Module):
    def __init__(
            self,
            dim,
            d_state=16,
            d_conv=4,
            expand=1,
            proj_bias=False,
            conv_bias=True,
            act_layer=nn.SiLU,
            norm_layer=nn.LayerNorm,
        ):
        super().__init__()
        self.dim = dim
        self.d_state = d_state
        self.d_conv = d_conv
        self.expand = expand
        self.d_inner = int(expand * dim)
        self.dt_rank = math.ceil(dim / 16)
        
        # Input projections
        self.norm = norm_layer(dim)
        self.in_proj = nn.Linear(dim, 2 * self.d_inner, bias=proj_bias)
        self.act = act_layer()
        
        # Sequential modeling
        self.conv1d = nn.Conv1d(self.d_inner, self.d_inner, kernel_size=self.d_conv, groups=self.d_inner, padding=self.d_conv - 1, bias=conv_bias)
        
        # State space modeling
        self.x_proj = nn.Linear(self.d_inner, self.dt_rank + self.d_state * 2, bias=False)
        self.dt_proj = nn.Linear(self.dt_rank, self.d_inner, bias=True)
        
        A = repeat(torch.arange(1, self.d_state + 1), "n -> d n", d=self.d_inner)
        self.A_log = nn.Parameter(torch.log(A))
        self.D = nn.Parameter(torch.ones(self.d_inner))
        
        # Output projections
        self.out_proj = nn.Linear(self.d_inner, self.dim, bias=proj_bias)

    def forward(self, x):
        (b, l, d) = x.shape
        identity = x
        
        # Inputs: [B, N+1, C]
        x = self.norm(x)
        xz = self.in_proj(x)
        (x, z) = torch.split(xz, [self.d_inner, self.d_inner], dim=-1)
        
        # Sequential modeling
        x = rearrange(x, "b l d -> b d l")
        x = self.conv1d(x)[:, :, 0:l]
        x = rearrange(x, "b d l -> b l d")
        x = self.act(x)
        
        # SSM
        y = self.ssm(x)
        
        # Gating
        y = y * self.act(z)
        
        # Output
        out = self.out_proj(y) + identity
        
        return out
    
    def ssm(self, x):
        (d_in, n) = self.A_log.shape
        
        # Compute ∆ A B C D, the state space parameters.
        #     A, D are input independent (see Mamba paper [1] Section 3.5.2 "Interpretation of A" for why A isn't selective)
        #     ∆, B, C are input-dependent (this is a key difference between Mamba and the linear time invariant S4, and is why Mamba is called **selective** state spaces)
        
        A = -torch.exp(self.A_log.float())
        D = self.D.float()
        
        x_ΔBC = self.x_proj(x)
        (Δ, B, C) = torch.split(x_ΔBC, [self.dt_rank, n, n], dim=-1)
        
        Δ = self.dt_proj(Δ)
        Δ = F.softplus(Δ)
        
        y = self.selective_scan(x, Δ, A, B, C, D)
        
        return y
    
    def selective_scan(self, u, Δ, A, B, C, D):
        """Does selective scan algorithm. See:
            - Section 2 State Space Models in the Mamba paper [1]
            - Algorithm 2 in Section 3.2 in the Mamba paper [1]
            - run_SSM(A, B, C, u) in The Annotated S4 [2]

        This is the classic discrete state space formula:
            x(t + 1) = Ax(t) + Bu(t)
            y(t)     = Cx(t) + Du(t)
        except B and C (and the step size delta, which is used for discretization) are dependent on the input x(t).
    
        Args:
            u: shape (b, l, d_in)    (See Glossary at top for definitions of b, l, d_in, n...)
            delta: shape (b, l, d_in)
            A: shape (d_in, n)
            B: shape (b, l, n)
            C: shape (b, l, n)
            D: shape (d_in,)
    
        Returns:
            output: shape (b, l, d_in)
    
        Official Implementation:
            selective_scan_ref(), https://github.com/state-spaces/mamba/blob/main/mamba_ssm/ops/selective_scan_interface.py#L86
            Note: I refactored some parts out of `selective_scan_ref` out, so the functionality doesn't match exactly.
        Faster Implementation:
            https://github.com/kyegomez/zeta/blob/master/zeta/nn/modules/ssm.py
            
        """
        (b, l, d_in) = u.shape
        n = A.shape[1]
        
        # Discretize continuous parameters (A, B)
        # - A is discretized using zero-order hold (ZOH) discretization (see Section 2 Equation 4 in the Mamba paper [1])
        # - B is discretized using a simplified Euler discretization instead of ZOH. From a discussion with authors:
        #   "A is the more important term and the performance doesn't change much with the simplification on B"
        ΔA = torch.exp(einsum(Δ, A, 'b l d_in, d_in n -> b l d_in n'))
        ΔB_u = einsum(Δ, B, u, 'b l d_in, b l n, b l d_in -> b l d_in n')
        
        # Perform selective scan (see scan_SSM() in The Annotated S4 [2])
        # Note that the below is sequential, while the official implementation does a much faster parallel scan that
        # is additionally hardware-aware (like FlashAttention).
        # x = torch.zeros((b, d_in, n), device=ΔA.device)
        # ys = []    
        # for i in range(l):
        #     x = ΔA[:, i] * x + ΔB_u[:, i]
        #     y = einsum(x, C[:, i, :], 'b d_in n, b n -> b d_in')
        #     ys.append(y)
        # y = torch.stack(ys, dim=1)  # shape (b, l, d_in)
        
        # Faster
        hs = pscan(ΔA, ΔB_u)
        y = (hs @ C.unsqueeze(-1)).squeeze()
        
        y = y + u * D
    
        return y
        

#----------------------------------------------------------------------------

class VisionMamba(nn.Module):
    def __init__(
            self,
            img_size,
            patch_size,
            in_channels=3,
            num_classes=1000,
            global_pool="token",
            embed_dim=192,
            depth=12,
            class_token=True,
            pos_embed="learn",
            no_embed_class=False,
            reg_tokens=0,
            pre_norm=False,
            fc_norm=None,
            dynamic_img_size=False,
            dynamic_img_pad=False,
            drop_rate=0.0,
            pos_drop_rate=0.0,
            patch_drop_rate=0.0,
            proj_drop_rate=0.0,
            drop_path_rate=0.0,
            weight_init="",
            fix_init=False,
            embed_layer=PatchEmbed,
            norm_layer=None,
            act_layer=None,
            block_fn=Block,
        ):
        super().__init__()
        assert global_pool in ('', 'avg', 'avgmax', 'max', 'token', 'map')
        assert class_token or global_pool != 'token'
        assert pos_embed in ('', 'none', 'learn')
        use_fc_norm = global_pool in ('avg', 'avgmax', 'max') if fc_norm is None else fc_norm
        norm_layer = norm_layer or partial(nn.LayerNorm, eps=1e-6)
        act_layer = act_layer or nn.SiLU
        
        self.num_classes = num_classes
        self.global_pool = global_pool
        self.num_features = self.head_hidden_size = self.embed_dim = embed_dim  # for consistency with other models
        self.num_prefix_tokens = 1 if class_token else 0
        self.num_prefix_tokens += reg_tokens
        self.num_reg_tokens = reg_tokens
        self.has_class_token = class_token
        self.no_embed_class = no_embed_class  # don't embed prefix positions (includes reg)
        self.dynamic_img_size = dynamic_img_size
        self.grad_checkpointing = False

        # Patch embedding
        self.patch_embed = embed_layer(
            img_size=(img_size, img_size),
            patch_size=(patch_size, patch_size),
            in_channels=in_channels,
            embed_dim=embed_dim,
            bias=not pre_norm,
        )
        num_patches = self.patch_embed.num_patches + 1
        
        # CLS token
        self.cls_index = num_patches // 2
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) if class_token else None

        # Positional Embedding
        self.pos_embed = nn.Parameter(0.02 * torch.randn(1, num_patches, embed_dim))

        # Main blocks
        self.blocks = nn.Sequential(
            *[Block(embed_dim, act_layer=act_layer, norm_layer=norm_layer) for _ in range(depth)]
        )
        self.norm = norm_layer(embed_dim) if not use_fc_norm else nn.Identity()

        # Output
        self.fc_norm = norm_layer(embed_dim) if use_fc_norm else nn.Identity()
        self.head_drop = nn.Dropout(drop_rate)
        self.head = nn.Linear(self.embed_dim, num_classes)
        
        # Initialize weights
        trunc_normal_(self.pos_embed, std=0.02)
        nn.init.normal_(self.cls_token, std=1e-6)
        
    def _pos_embed(self, x):
        pos_embed = self.pos_embed
        cls_token = self.cls_token.expand(x.shape[0], -1, -1)
        
        x0, x1 = torch.chunk(x, chunks=2, dim=1)
        x = torch.cat([x0, cls_token, x1], dim=1)
        
        return x + pos_embed

    def forward_features(self, x):
        # Patchify: [B, 3, H, W] -> [B, N, C]
        x = self.patch_embed(x)

        # Positional embedding: [B, N, C] -> [B, N+1, C]
        x = self._pos_embed(x)

        # Main blocks: [B, N+1, C]
        x = self.blocks(x)
        x = self.norm(x)
        
        return x
    
    def forward_head(self, x):
        x = x[:, self.cls_index] # class token
        x = self.fc_norm(x)
        x = self.head_drop(x)
        x = self.head(x)
        return x
    
    def forward(self, x):
        x = self.forward_features(x)
        x = self.forward_head(x)
        return x

#----------------------------------------------------------------------------