from functools import partial
import math
import warnings
import torch
import torch.nn as nn
import torch.nn.functional as F

#----------------------------------------------------------------------------

@torch.no_grad()
def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor

#----------------------------------------------------------------------------

class PatchEmbed(nn.Module):
    def __init__(self, img_size, patch_size, in_channels, embed_dim, bias=True):
        super().__init__()
        assert isinstance(img_size, tuple) and len(img_size) == 2
        assert isinstance(patch_size, tuple) and len(patch_size) == 2
        assert img_size[0] % patch_size[0] == 0 and img_size[1] % patch_size[1] == 0
        self.img_size = img_size
        self.patch_size = patch_size
        self.grid_size = tuple([s // p for s, p in zip(self.img_size, self.patch_size)])
        self.num_patches = self.grid_size[0] * self.grid_size[1]
        self.proj = nn.Conv2d(in_channels, embed_dim, kernel_size=patch_size, stride=patch_size, padding=0, bias=bias)

    def forward(self, x):
        # B x 3 x H x W -> B x (H' x W') x C
        B, C, H, W = x.shape
        assert H == self.img_size[0]
        assert W == self.img_size[1]
        x = self.proj(x)
        x = torch.flatten(x, start_dim=2).transpose(1, 2)
        return x

#----------------------------------------------------------------------------

class Attention(nn.Module):
    def __init__(
            self,
            dim,
            num_heads,
            qkv_bias=False,
            qk_norm=False,
            attn_drop=0.0,
            proj_drop=0.0,
            norm_layer=nn.LayerNorm,
        ):
        super().__init__()
        assert dim % num_heads == 0
        self.num_heads = num_heads
        self.head_dim = dim // num_heads
        self.scale = self.head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, self.head_dim).permute(2, 0, 3, 1, 4)
        q, k, v = qkv.unbind(0)
        
        q = q * self.scale
        attn = q @ k.transpose(-2, -1)
        attn = torch.softmax(attn, dim=-1)
        attn = self.attn_drop(attn)
        x = attn @ v
        
        x = x.transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        
        return x

#----------------------------------------------------------------------------

class Mlp(nn.Module):
    def __init__(
            self,
            in_features,
            hidden_features=None,
            out_features=None,
            act_layer=nn.GELU,
            norm_layer=None,
            bias=True,
            drop=0.0,
            use_conv=False,
        ):
        super().__init__()
        hidden_features = hidden_features or in_features
        out_features = out_features or in_features

        self.fc1 = nn.Linear(in_features, hidden_features, bias=bias)
        self.act = act_layer()
        self.drop1 = nn.Dropout(drop)
        self.norm = norm_layer(hidden_features) if norm_layer is not None else nn.Identity()
        self.fc2 = nn.Linear(hidden_features, out_features, bias=bias)
        self.drop2 = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop1(x)
        x = self.norm(x)
        x = self.fc2(x)
        x = self.drop2(x)
        return x

#----------------------------------------------------------------------------

class Block(nn.Module):
    def __init__(
            self,
            dim,
            num_heads,
            mlp_ratio=4.0,
            qkv_bias=False,
            qk_norm=False,
            proj_drop=0.0,
            attn_drop=0.0,
            init_values=None,
            drop_path=0.0,
            act_layer=nn.GELU,
            norm_layer=nn.LayerNorm,
            mlp_layer=Mlp,
        ):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim,
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_norm=qk_norm,
            attn_drop=attn_drop,
            proj_drop=proj_drop,
            norm_layer=norm_layer,
        )

        self.norm2 = norm_layer(dim)
        self.mlp = mlp_layer(
            in_features=dim,
            hidden_features=int(dim * mlp_ratio),
            act_layer=act_layer,
            drop=proj_drop,
        )

    def forward(self, x):
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))
        return x

#----------------------------------------------------------------------------

class VisionTransformer(nn.Module):
    def __init__(
            self,
            img_size,
            patch_size,
            in_channels=3,
            num_classes=1000,
            global_pool="token",
            embed_dim=192,
            depth=12,
            num_heads=3,
            mlp_ratio=4.0,
            qkv_bias=True,
            qk_norm=False,
            init_values=None,
            class_token=True,
            pos_embed="learn",
            no_embed_class=False,
            reg_tokens=0,
            pre_norm=False,
            fc_norm=None,
            dynamic_img_size=False,
            dynamic_img_pad=False,
            drop_rate=0.0,
            pos_drop_rate=0.0,
            patch_drop_rate=0.0,
            proj_drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.0,
            weight_init="",
            fix_init=False,
            embed_layer=PatchEmbed,
            norm_layer=None,
            act_layer=None,
            block_fn=Block,
            mlp_layer=Mlp,
        ):
        super().__init__()
        assert global_pool in ('', 'avg', 'avgmax', 'max', 'token', 'map')
        assert class_token or global_pool != 'token'
        assert pos_embed in ('', 'none', 'learn')
        use_fc_norm = global_pool in ('avg', 'avgmax', 'max') if fc_norm is None else fc_norm
        norm_layer = norm_layer or partial(nn.LayerNorm, eps=1e-6)
        act_layer = act_layer or nn.GELU
        
        self.num_classes = num_classes
        self.global_pool = global_pool
        self.num_features = self.head_hidden_size = self.embed_dim = embed_dim  # for consistency with other models
        self.num_prefix_tokens = 1 if class_token else 0
        self.num_prefix_tokens += reg_tokens
        self.num_reg_tokens = reg_tokens
        self.has_class_token = class_token
        self.no_embed_class = no_embed_class  # don't embed prefix positions (includes reg)
        self.dynamic_img_size = dynamic_img_size
        self.grad_checkpointing = False

        # Patch embedding
        self.patch_embed = embed_layer(
            img_size=(img_size, img_size),
            patch_size=(patch_size, patch_size),
            in_channels=in_channels,
            embed_dim=embed_dim,
            bias=not pre_norm,
        )
        num_patches = self.patch_embed.num_patches + 1
        
        # CLS token
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) if class_token else None

        # Positional Embedding
        self.pos_embed = nn.Parameter(0.02 * torch.randn(1, num_patches, embed_dim))

        # Main blocks
        self.blocks = nn.Sequential(
            *[Block(embed_dim, num_heads) for _ in range(depth)]
        )
        self.norm = norm_layer(embed_dim) if not use_fc_norm else nn.Identity()

        # Output
        self.fc_norm = norm_layer(embed_dim) if use_fc_norm else nn.Identity()
        self.head_drop = nn.Dropout(drop_rate)
        self.head = nn.Linear(self.embed_dim, num_classes)
        
        # Initialize weights
        trunc_normal_(self.pos_embed, std=0.02)
        nn.init.normal_(self.cls_token, std=1e-6)
        
    def _pos_embed(self, x):
        pos_embed = self.pos_embed
        cls_token = self.cls_token.expand(x.shape[0], -1, -1)
        x = torch.cat([cls_token, x], dim=1)
        return x + pos_embed

    def forward_features(self, x):
        # Patchify: [B, 3, H, W] -> [B, N, C]
        x = self.patch_embed(x)

        # Positional embedding: [B, N, C] -> [B, N+1, C]
        x = self._pos_embed(x)

        # Main blocks: [B, N+1, C]
        x = self.blocks(x)
        x = self.norm(x)
        
        return x
    
    def forward_head(self, x):
        x = x[:, 0] # class token
        x = self.fc_norm(x)
        x = self.head_drop(x)
        x = self.head(x)
        return x
    
    def forward(self, x):
        x = self.forward_features(x)
        x = self.forward_head(x)
        return x

#----------------------------------------------------------------------------

if __name__ == "__main__":
    pass